<?php
/**
 * @file
 * Install, update and uninstall functions for the ceazine module.
 */

/**
 * Implements hook_requirements().
 */
function ceazine_requirements($phase) {
  $requirements = array();
  $t = get_t();
  if ($phase == 'install') {

    $libs = array(
      'booklet' => array(
        'title' => 'jQuery Booklet',
        'min_version' => '1.4',
      ),
      'easing' => array(
        'title' => 'jQuery Easing',
        'min_version' => '1.3',
      ),
      'colorbox' => array(
        'title' => 'jQuery Colorbox',
        'min_version' => '1.3',
      ),
    );
    foreach ($libs as $lib=>$parms){
      $library = libraries_detect($lib);
      $requirements[$lib] = array( 'title' => $t($parms['title']),);
      if ($library['installed'] && $library['version'] >= $parms['min_version']) {
        $requirements[$lib]['description'] = '';
        $requirements[$lib]['value'] = $library['version'];
        $requirements[$lib]['severity'] = REQUIREMENT_OK;
      }
      else if ($library['installed'] && $library['version'] < $parms['min_version']){
        $requirements[$lib]['description'] = $t('You must download current version of @lib. ',array('@lib'=>$parms['title'])).
                                              l($t('Go to download link'),$library['download url']).'.<br />'.
                                              t('You can update @lib with drush typing "drush @lib-plugin"', array('@lib'=>$lib));
        $requirements[$lib]['value'] = $t("ceaZIne require @lib @version version at least. Installed @installedVersion", 
          array(
            '@lib'              => $lib,
            '@version'          => $parms['min_version'],
            '@installedVersion' => $library['version'],
          )
        );
        $requirements[$lib]['severity'] = REQUIREMENT_ERROR;    
      }
      else {
        $requirements[$lib]['value'] = $t('ceaZine require @lib',array('@lib'=>$lib));
        $requirements[$lib]['description'] =  $t('You must download @lib. ',array('@lib'=>$parms['title'])).
                                              l($t('Go to download link'),$library['download url']).'.<br />'.
                                              t('You can install @lib with drush typing "drush @lib-plugin"', array('@lib'=>$lib));
        $requirements[$lib]['severity'] = REQUIREMENT_ERROR;
      }
      if ( $requirements[$lib]['description'] ){
        drupal_set_message("{$requirements[$lib]['value']}.<br /> {$requirements[$lib]['description']}",'error');
      }
    }
  }
  return $requirements;
}

/**
* Implements hook_install().
*/
function ceazine_install(){
  require_once('includes/ceazine.content_type.inc');
  require_once('includes/ceazine.field.inc');
  variable_set('ceazine_installation_result', 'clean');
  ceazine_manage_custom_content_type();
  ceazine_manage_fields('create'); 
  if ( variable_get('ceazine_installation_result') != 'clean' ){
    ceazine_install_error(t('Errors in ceaZine installation process.Revise system logs.'));  
  }
  else {
    variable_del('ceazine_installation_result');
  }
}

/**
* Implements hook_uninstall().
*/

function ceazine_uninstall(){
  require_once('includes/ceazine.field.inc');
  variable_set('ceazine_installation_result', 'clean');
  ceazine_manage_fields('delete');
  if ( !node_type_delete('ceazine') ){
    ceazine_install_error(t('ceaZine custom content type are not deleted.'));
  }
  if ( variable_get('ceazine_installation_result') != 'clean' ){
    ceazine_install_error(t('Errors in ceaZine uninstallation process.Revise system logs.'));  
  }
  else {
    variable_del('ceazine_installation_result');
  }
}

 
function ceazine_install_error($err_msg){
  watchdog('ceazine',$err_msg,array(), WATCHDOG_CRITICAL);
  drupal_set_message($err_msg,'error');
  variable_set('ceazine_installation_result', 'dirty');
}
